<?php
/**
 * @file
 * Provides configurable Paragraphs layout templates.
 *
 * This provides the UI to list, create, edit and delete Paragraphs layouts.
 */

/**
 * Implements hook_permission().
 */
function layout_paragraphs_permission() {
  $perms = array(
    'administer layout paragraphs' => array(
      'title' => t('Administer Layout Paragraphs'),
      'description' => t('Is able to administer Layouts for the Paragraphs module'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function layout_paragraphs_menu() {
  $items = array();
  $items['admin/structure/paragraphs/layouts'] = array(
    'title' => 'Layout Paragraphs',
    'description' => 'Manage layouts for use with Paragraphs',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_settings_page'),
    'access arguments' => array('administer layout paragraphs'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/add'] = array(
    'title' => 'Add Paragraphs layout template',
    'page callback' => 'layout_paragraphs_template_settings_add_form',
    'access arguments' => array('administer layout paragraphs'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore'] = array(
    'title' => 'Edit Paragraphs layout template settings',
    'title callback' => 'layout_paragraphs_template_title_callback',
    'title arguments' => array(5),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_settings_edit_form', 4),
    'access arguments' => array('administer layout paragraphs'),
    'file' => 'layout_paragraphs.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/edit'] = array(
    'title' => 'Edit Paragraphs layout template settings',
    'title callback' => 'layout_paragraphs_template_title_callback',
    'title arguments' => array(5),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_settings_edit_form', 4),
    'access arguments' => array('administer layout paragraphs'),
    'file' => 'layout_paragraphs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/configure'] = array(
    'title' => 'Configure Paragraphs layout template regions',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_configure_form', 4),
    'access arguments' => array('administer layout paragraphs'),
    'type' =>  MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/delete'] = array(
    'title' => 'Delete Paragraphs layout template',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_delete_form', 4),
    'access arguments' => array('administer layout paragraphs'),
    'type' =>  MENU_NORMAL_ITEM,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/row/%/delete'] = array(
    'title' => 'Delete row',
    'page callback' => 'layout_paragraphs_template_delete_row',
    'page arguments' => array(4, 6),
    'access arguments' => array('administer layout paragraphs'),
    'type' => MENU_CALLBACK,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/row/%/select-widths'] = array(
    'title' => 'Choose region widths',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_region_style_select', 4, 6),
    'access arguments' => array('administer layout paragraphs'),
    'type' => MENU_CALLBACK,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/row/%/configure'] = array(
    'title' => 'Add row',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_edit_row_form', 4, 6),
    'access arguments' => array('administer layout paragraphs'),
    'type' => MENU_CALLBACK,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );

  $items['admin/structure/paragraphs/layouts/%layout_paragraphs_tempstore/row/%/configure/%'] = array(
    'title' => 'Add row',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('layout_paragraphs_template_edit_row_form', 4, 6, 8),
    'access arguments' => array('administer layout paragraphs'),
    'type' => MENU_CALLBACK,
    'weight' => -10,
    'file' => 'layout_paragraphs.admin.inc',
  );
  $base = array(
    'access arguments' => array('administer layout paragraphs'),
    'theme callback' => 'ajax_base_page_theme',
  );
  $items['admin/structure/paragraphs/layouts/manage/%layout_paragraphs_instance_tempstore/add-block/%/%'] = array(
    'title' => 'Add block',
    'page callback' => 'layout_block_add_page',
    'page arguments' => array(5, 7, 8),
    'file path' => 'core/modules/layout',
    'file' => 'layout.admin.inc',
  ) + $base;

  return $items;
}

/**
 * Get a layout paragraphs template currently being edited from the tempstore.
 *
 * If a template is not yet being edited, the template will be loaded from
 * configuration.
 *
 * @param string $flexible_template_name
 *   The machine name of the flexible template to load.
 *
 * @return LayoutFlexibleTemplate
 *   The flexible template object.
 */
function layout_paragraphs_tempstore_load($flexible_template_name = NULL) {
  return layout_flexible_tempstore_load($flexible_template_name, 'paragraphs');
}

/**
 * Get a layout paragraphs instance currently being edited from the tempstore.
 *
 * If an instance is not yet being edited, the instance will be loaded from
 * configuration.
 *
 * @param string $flexible_template_name
 *   The machine name of the flexible template to load.
 *
 * @return Layout
 *   The Layout paragraphs instance.
 */
function layout_paragraphs_instance_tempstore_load($flexible_template_name = NULL) {
  // layout_flexible_tempstore_load($flexible_template_name, 'paragraphs');
  // @todo: implement this. Temporarily sending back an empty layout every time.
  $config = array(
    'is_new' => TRUE,
    'layout_template' => $flexible_template_name,
    'type' => 'paragraphs',
    'is_full_page' => FALSE,
    'name' => $instance['entity_type'] . '.' . $instance['bundle'] . '.' . $instance['field_name'] . $id,
  );
  $layout_instance = new Layout($config);
  return $layout_instance;
}

/**
 * Helper to get the title of a Paragraphs layout template.
 *
 * @param object $template
 *   The object of the template to get the title for.
 */
function layout_paragraphs_template_title_callback($template) {
  return t('!name', array('!name' => $template->title));
}

/**
 * Implements hook_theme().
 */
function layout_paragraphs_theme() {
  return array(
    'layout_paragraphs_template_info' => array(
      'variables' => array('template_info' => NULL),
      'path' => backdrop_get_path('module', 'layout_paragraphs') . '/theme',
      'file' => 'layout_paragraphs.theme.inc',
    ),
    'layout_paragraphs_template_style_option' => array(
      'variables' => array('row_style' => NULL),
      'path' => backdrop_get_path('module', 'layout_paragraphs') . '/theme',
      'file' => 'layout_paragraphs.theme.inc',
    ),
    'layout_paragraphs_template_option' => array(
      'variables' => array('template_info' => NULL),
      'path' => backdrop_get_path('module', 'layout_paragraphs') . '/theme',
      'file' => 'layout_paragraphs.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function layout_paragraphs_field_widget_info() {
  return array(
    'layout_paragraphs' => array(
      'label' => t('Layout UI'),
      'field types' => array('paragraphs'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function layout_paragraphs_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();

  if ($widget['type'] == 'layout_paragraphs') {
    $options = array(
      'default' => t('Default'),
    );
    $templates = layout_flexible_template_load_all('paragraphs');
    foreach ($templates as $template) {
      $options[$template->name] = $template->title;
    }
    $form['available_layout_templates'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Layout templates'),
      '#description' => t('Which layout template(s) should be available for this Paragraphs field?'),
      '#options' => $options,
      '#default_value' => (!empty($settings['available_layout_templates'])) ? $settings['available_layout_templates'] : 'default',
      '#required' => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function layout_paragraphs_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'layout_paragraphs':
      // Return paragraphs_field_multiple_value_form($field, $instance, $langcode, $items, $form, $form_state, $delta, $element);.
      form_load_include($form_state, 'inc', 'layout_paragraphs', 'layout_paragraphs.admin');
      return layout_paragraphs_edit_content($form, $form_state, $field, $instance);
  }
}

/**
 * Implements hook_layout_renderer_info().
 */
function layout_paragraphs_layout_renderer_info() {
  $info = array(
    'paragraphs' => array(
      'class' => 'LayoutRendererParagraphs',
    ),
    'paragraphs_editor' => array(
      'class' => 'LayoutRendererEditorParagraphs',
    ),
  );
  return $info;
}

/**
 * Implements hook_layout_style_info().
 */
function layout_paragraphs_layout_style_info() {
  $info['paragraphs'] = array(
    'title' => t('Paragraphs'),
    'description' => t('The default Paragraphs block rendering style.'),
    'block theme' => 'block',
    'class' => 'LayoutStyleParagraphs',
    'template' => 'templates/block_paragraphs',
    'file' => 'layout_paragraphs.theme.inc',
  );
  // @todo: add a 'paragraphs_editor' style for the editor which uses preview mode.
  return $info;
}

/**
 * Implements hook_config_info().
 */
function layout_paragraphs_config_info() {
  $prefixes['layout.paragraphs'] = array(
    'name_key' => 'name',
    'label_key' => 'title',
    'group' => t('Layout Paragraphs'),
  );
  return $prefixes;
}

/**
 * Implements hook_layout_context_info().
 */
function layout_paragraphs_layout_context_info() {
  $info['paragraphs'] = array(
    'title' => t('Paragraphs'),
    'class' => 'ParagraphsLayoutContext',
    'menu paths' => array(
      'admin/structure/paragraphs/layouts',
    ),
  );
  return $info;
}

/**
 * Implements hook_layout_relationship_info().
 */
// @todo relationships needed? E.g. host entity from paragraph?
/*
function layout_paragraphs_layout_relationship_info() {
  $info['author_from_node'] = array(
    'title' => t('Author of content'),
    'class' => 'LayoutRelationshipAuthorFromNode',
    'context' => 'node',
    'context_label' => t('Content'),
    'description' => t('Creates a user context from the author of a piece of content.'),
  );

  return $info;
}
*/

/**
 * Alters the list of flexible layout types to add Layout Paragraphs.
 */
function layout_paragraphs_layout_flexible_types_alter(&$types) {
  $types['paragraphs'] = t('Layout Paragraphs');
}

/**
 * Reset all caches provided by Layout Paragraphs module.
 */
function layout_paragraphs_reset_caches() {
  cache()->delete('layout:paragraphs:config');
  backdrop_static_reset('layout_flexible_template_load_all__paragraphs');
}

/**
 * Implements hook_autoload_info().
 */
function layout_paragraphs_autoload_info() {
  return array(
    'LayoutRendererParagraphs' => 'plugins/renderers/layout_renderer_paragraphs.inc',
    'LayoutRendererEditorParagraphs' => 'plugins/renderers/layout_renderer_editor_paragraphs.inc',
    'BlockParagraphs' => 'includes/block.paragraphs.inc',
    'ParagraphsLayoutContext' => 'includes/paragraphs_layout_context.inc',

    // Styles.
    'LayoutStyleParagraphs' => 'plugins/styles/layout_style_paragraphs.inc',
  );
}

/**
 * Implements hook_block_info().
 */
function layout_paragraphs_block_info() {
  $blocks = array();

  // Layout Paragraphs blocks.
  $blocks['paragraph'] = array(
    'info' => t('Paragraph'),
    'description' => t('Placeholder for Paragraphs block.'),
    'class' => 'BlockParagraphs',
    'required contexts' => array('paragraphs'),
  );
  return $blocks;
}

/**
 * Load the information of either a single Layout Paragraphs template or all
 * available Layout Paragraphs templates.
 *
 * @param string $template_name
 *   Optionally specify a name of a single Layout Paragraphs template, e.g.
 *   "default". If no template name is specified, information for all
 *   Layout Paragraphs templates will be returned.
 *
 * @param boolean $rebuild
 *   Whether the list of layout template info needs to be rebuilt (see
 *   https://github.com/backdrop/backdrop-issues/issues/984). The rebuild is
 *   required only on specific cases, so this defaults to FALSE. That way, the
 *   rest of the times the layout cache is used (when available) for performance
 *   reasons.
 *
 * @return array
 *   The Layout Paragraphs template information. We aren't using
 *   hook_layout_info() because we're keeping these layouts out of the main
 *   Layout UI.
 */
function layout_paragraphs_get_layout_template_info($template_name = NULL, $rebuild = FALSE) {
  $info = &backdrop_static(__FUNCTION__);

  // Try getting a cached list of layout info.
  if (!isset($info) && !$rebuild) {
    $cache = cache('cache')->get('layout_paragraphs_info');

    if ($cache && $cache->data) {
      $info = $cache->data;
    }
  }

  // Rebuild the list of layout info.
  if (!isset($info[$template_name]) || $rebuild) {
    $info = array();
    $styles = layout_flexible_row_styles();

    $layout_paragraphs_templates = layout_flexible_template_load_all('paragraphs');
    foreach ($layout_paragraphs_templates as $layout_paragraphs_template) {
      $info[$layout_paragraphs_template->name] = array(
        'title' => $layout_paragraphs_template->title,
        'name' => $layout_paragraphs_template->name,
        'regions' => array(),
        'default region' => '',
        'template' => 'layout--flexible',
        'flexible' => TRUE,
        'type' => 'paragraphs',
        'path' => backdrop_get_path('module', 'layout') . '/templates',
        'preview' => "<svg width='50' height='75'><rect x='0' y='0' width='50' height='75' fill='rgb(102, 102, 102)' /><rect x='52' y='0' width='52' height='75' fill='rgb(102, 102, 102)' /></svg>",
        'libraries' => array('bootstrap4-gs'),
      );

      foreach ($layout_paragraphs_template->rows as $row_name => $region) {
        $region_style = $styles[$region['contains']];
        for ($i = 0; $i < $region_style['region_count']; $i++) {
          if (!empty($region['region_names']['region_' . $i]['label'])) {
            $region_name = $region['region_names']['region_' . $i]['label'];
          }
          else {
            $region_name = $row_name . ' ' . $i;
          }
          $info[$layout_paragraphs_template->name]['regions'][$row_name . '--' . $i] = $region_name;
        }
      }
    }
    // Populate defaults.
    foreach ($info as $name => $layout_info) {
      $info[$name] += array(
        'hidden' => FALSE,
        'preview' => "<svg width='50' height='75'><rect x='0' y='0' width='50' height='75' fill='rgb(102, 102, 102)' /></svg>",
        'default region' => 'content',
        'stylesheets' => array(
          'all' => array(str_replace('_', '-', $name) . '.css'),
        ),
      );
      if (!isset($info[$name]['template'])) {
        $template_path = BACKDROP_ROOT . '/' . $layout_info['path'] . '/layout--' . str_replace('_', '-', $name) . '.tpl.php';

        if (is_file($template_path)) {
          $info[$name]['template'] = 'layout--' . str_replace('_', '-', $name);
        }
      }
    }

    // Sort the available layouts by display name.
    backdrop_sort($info, array('title' => SORT_STRING));

    cache('cache')->set('layout_paragraphs_info', $info);
  }

  if ($template_name) {
    if (isset($info[$template_name])) {
      return $info[$template_name];
    }
    else {
      return [];
    }
  }
  else {
    return $info;
  }
}

/**
 * Implements hook_field_update_field().
 *
 * Make changes after a Layout Paragraphs-enabled field is updated.
 */
function layout_paragraphs_field_update_field($field, $prior_field, $has_data) {
  $pause = 1;
  // @todo: update the field's layout template settings (is this needed here?)
}
